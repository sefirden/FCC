//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/swipeNumbers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SwipeNumbers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SwipeNumbers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""swipeNumbers"",
    ""maps"": [
        {
            ""name"": ""Slider"",
            ""id"": ""0f18b3a8-7f31-4282-baab-7a4330f514e2"",
            ""actions"": [
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""6d36cd03-af6b-4dec-b89c-89aa5f7fe380"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Mobile"",
                    ""id"": ""9a2c69dd-cee9-4736-a798-e3ae10f71287"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5d87ee1f-7967-4ea6-a3ae-5fa2d33883c7"",
                    ""path"": ""<Touchscreen>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e2d11cfb-e13a-4fb4-9557-dbf982ee5d71"",
                    ""path"": ""<Touchscreen>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""f65e819f-cfce-40c5-a931-6b48eafd6376"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bd4666a6-6a55-474d-833e-ceb2cafc6aa5"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f5dc8a8d-dc11-4eee-b265-0f0ed87450e8"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Slider
        m_Slider = asset.FindActionMap("Slider", throwIfNotFound: true);
        m_Slider_Swipe = m_Slider.FindAction("Swipe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Slider
    private readonly InputActionMap m_Slider;
    private ISliderActions m_SliderActionsCallbackInterface;
    private readonly InputAction m_Slider_Swipe;
    public struct SliderActions
    {
        private @SwipeNumbers m_Wrapper;
        public SliderActions(@SwipeNumbers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swipe => m_Wrapper.m_Slider_Swipe;
        public InputActionMap Get() { return m_Wrapper.m_Slider; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SliderActions set) { return set.Get(); }
        public void SetCallbacks(ISliderActions instance)
        {
            if (m_Wrapper.m_SliderActionsCallbackInterface != null)
            {
                @Swipe.started -= m_Wrapper.m_SliderActionsCallbackInterface.OnSwipe;
                @Swipe.performed -= m_Wrapper.m_SliderActionsCallbackInterface.OnSwipe;
                @Swipe.canceled -= m_Wrapper.m_SliderActionsCallbackInterface.OnSwipe;
            }
            m_Wrapper.m_SliderActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swipe.started += instance.OnSwipe;
                @Swipe.performed += instance.OnSwipe;
                @Swipe.canceled += instance.OnSwipe;
            }
        }
    }
    public SliderActions @Slider => new SliderActions(this);
    public interface ISliderActions
    {
        void OnSwipe(InputAction.CallbackContext context);
    }
}
